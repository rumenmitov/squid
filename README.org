#+title: Log-Based Snapshotting in PhantomOS Specification
#+author: Rumen Mitov
#+date: [2024-11-22]
#+options: toc:nil
#+startup: overview


* Minutiae
- Genode-only source code (used for testing): https://github.com/rumenmitov/genode-squid/
- PhantomOS Squid Snapshot implementation: https://github.com/rumenmitov/phantomuserland/tree/dev
  
* Introduction
This work centers around an alternative implementation of the snapshotting mechanism in PhantomOS. PhantomOS is an orthogonally persistent operating system. This is an operating system where the machine's state should survive any unexpected crashes and this should apply to the entire state. This snapshotting should be handled by the kernel, not the userspace programmer[fn:1].

Previously, PhantomOS used a superblock mechanism. This entailed that the machine captured all state into one snapshot[fn:2]. This new approach seeks to use a logging alternative instead. The main idea is to only save changes and use the old, unchanged files from the previous snapshots. The hope is that this will be faster, more memory efficient and more reliable than the superblock approach.

* Terminology
The previous iteration of snapshotting in PhantomOS used a superblock structure to save the machine state. This new approach uses logging. This new approach means that instead of saving every piece of data every time a snapshot is taken, only the changed pieces of data are saved. On recovery, the kernel walks through all the changes and can recreate the state.

Since this work has been inspired by the Squid Cache, the snapshot mechanism is referred to as Squid Snapshot. The root directory in which all snapshots are stored is =/squid-root=.

The root directory contains timestamped directories which from now will be referred to as the individual snapshots. Each snapshot comprises of _ROOT_SIZE_ number of level 1 directory, which itself contains _L1_SIZE_ number of level 2 directories. Since L2 directories have to manage state (/see [[id:directory-structure][Directory Structure]]/) _L2_DIR_ will refer to an arbitrary level 2 directory.

Each _L2_DIR_ contains _L2_SIZE_ number of hashes. The hashes are referred to as _SquidFileHash_.

* Architecture
** Filesystem
For the logging to work a filesystem that supports it should be integrated into the project. Ext4 was chosen for this due to it being available as a Genode community library and its tenured adoption in Linux.

This library comes with its own bare-bones implementation of Ext4 with support for the following:
- Mount operations
  - Register and unregister block devices
  - Mount and unmount ext4 partitions
  - Support for read-only mounts
  - Setup of OS-dependent lock routines
  - Retrieve filesystem statistics
- Journal
  - Journal recovery
- File operations
  - Open, close, read, write, and truncate files
  - File seeking and position retrieval
  - File removal and renaming
  - Create hard links and symbolic links
  - Create special files (e.g., character and block devices)
  - Set and get file metadata such as mode, owner, and timestamps
- Directory operations
  - Create, remove, and rename directories
  - Open and close directories
  - Iterate over directory entries
- Extended Attributes
- Cache Management
  - Enable and disable write-back cache mode
  - Force cache flush
- Lock Interface
  - OS-dependent lock and unlock functions for mount points


*** Data Handling
There are a couple of alternatives we can take when saving memory into the filesystem.

One approach would be to save multiple (perhaps continuous) virtual memory pages inside one file. This approach is memory efficient (less files \Rightarrow less inodes) and fast (a single loaded file can be used for reading/writing multiple pages).

An alternative approach would be to reserve one file per page. This would be far more disk-space efficient, since unchanged files could be hard-linked to older snapshots.

I chose to go with the second option, simply because it sounded more interesting. Although it could be useful in the future to be able to specify which approach the kernel should use.

** Retention Policy
All snapshots are stored in the =/squid-root= directory. Finished snapshots are renamed to the UNIX timestamp of when that particular snapshot was completed.

By default, snapshots are taken every minute. The system will retain at most 5 finished snapshots at a time by default. However, if the machine is short on disk space, older snapshots will be pruned at a higher rate (/for more on this see [[id:new-snapshot][New Snapshot]]/).

** State Management
The state of the Squid Snapshots is managed by the global object _global_squid_ which is initialized at the start of the kernel. This object keeps track of the available hashes, memory allocation and is responsible for interacting with the filesystem (i.e. writing, reading, etc.).

** Directory Structure
:properties:
:id: directory-structure
:end:
All Squid Snapshots are stored inside the squid root =/squid-root=. The squid root contains the individual versioned snapshots. The versions are timestamps of when the snapshot was created.

Each snapshot is represented by a bounded trie, i.e. there is a fixed _ROOT_SIZE_ number of directories within the snapshot (these are referred to as level 1 directories of L1 for short). Inside each L1 there are _L1_SIZE_ number of level 2 directories. Each level 2 directory contains _L2_SIZE_ number of hashes.

Each hash represents a unique random file identifier which corresponds to one piece of data (i.e. one virtual memory page). For performance reasons, each _L2DIR_ keeps track of the available hashes in a stack. When new data requests a hash, an available one is popped. When data is not needed anymore (i.e. its _SquidFileHash_ destructor is called) the available hash is appended back to the stack.

#+begin_export latex
\clearpage
#+end_export

#+caption: Example directory tree of Squid Snapshot.
#+begin_src ascii
Squid Root                          squid-root
                                         |
                               --------------------
                               |        ...
Snapshot Version          <timestamp>
                               |
                    ------------------------
                    |         ...                   
L1                  00
                    |
            -------------------
            |      ...
L2          00
            |
       -----------
       |   ...
Hash  453
#+end_src

* Snapshotting Algorithm
** Initialization
1. Check if disk is mounted correctly
   - If not, try to recover
     - If recovery is unsuccessful error message is printed suggesting the use of a tool like *fsck*
2. Check if a finished snapshot exists (choose latest)
   - If it does load the *global_squid* object from the particular snapshot root
3. Check if the squid version of the snapshot matches the system's version
   - If not, present the user with two options:
     - System crashes and user must use an older, compliant version of PhantomOS to recover the snapshots
     - Snapshots are deleted, PhantomOS boots up fresh
4. Delete *current_snapshot* (if it exists)
   - *current_snapshot* signifies a snapshot that did not complete
5. Restore data (if there is a prior snapshot)
   - Copy the prior snapshot and name the root of the copy *current*. Keep in mind that files are hard-linked to the new snapshot as opposed to being copied!
   - Each virtual-page with prior data should be mapped to a corresponding *SquidFileHash* (this data can be restored with =squid_read()=)

** New Snapshot
:properties:
:id: new-snapshot
:end:

When creating the first snapshot (i.e. there exist no prior snapshots) iterating over the kernel objects will provide a fairly accurate estimate of the size needed for the snapshot. However, if there already exists a prior snapshot, the approximation will be an over-estimate as unmodified data will not need to be copied into the current snapshot (it is hard-linked to a prior one).

1. Estimate the size of the snapshot (call this size *snap_estimate*) by iterating over kernel objects
2. *snap_estimate* should be 2x free space
   - If not, delete old snapshot until the condition is true
3. New snapshot directory is created titled *current_snapshot*
4. *current_snapshot* is initialized to have the proper structure
5. Locks acquired for virtual memory pages inside the kernel
6. For each _dirty_ virtual memory page:
   1. Acquire unique hash
      - If no more hashes available crash the system (change the *ROOT_SIZE*, *L1_SIZE* and *L2_SIZE* configuration)
   2. Write virtual memory page to file
7. Write the *global_squid* object to a file in the root of *current_snapshot*
8. Measure the size of the snapshot directory and save the information in a human-readable format at the root of the snapshot directory
9. Rename *current* snapshot to the current timestamp, thus signifying that the snapshot is complete

* Problems and Potential Solutions
** DONE Filesystem with Support for Logging
Hand-rolling a custom logging mechanism is difficult to get right and custom solution is not needed when an industry standard will do just fine. For that reason Ext4 was selected. 

Ext4 is implemented by the [[https://codeberg.org/jws/genode-wundertuete/src/branch/sculpt-24.04-2024-04-19][lwext4]] Genode community library. It required some changes to the run file, but it works as intended.

** DONE Filesystem Improper Unmount
If the machine were to crash then the filesystem would not be properly unmounted. This is already handled by the above-mentioned [[https://codeberg.org/jws/genode-wundertuete/src/branch/sculpt-24.04-2024-04-19][lwext4]] library. On mount, it first tries to fix the filesystem. If that is unsuccessful it prints out a message that the _fsck_ Linux utility should be used.

** DONE Fast Reads and Writes
Since each data has a hash corresponding to its file in the Squid Snapshot, reading and writing data is efficient. Moreover since each _L2_DIR_ keeps track of the available hashes in a stack, getting a new hash is fast.

** DONE Sequential Writes
As an optimization, maybe we can write pages sequentially based on their addresses in order to make use of locality caching.

** DONE State-Management of L1
L1 directories should have a similar state management solution as L2 directories. Some L2 directories could be exhausted at first, but then become available. L1 directories should keep track of this.

** DONE Foreign Function Interface
Since the underlying filesystem operations are handled by Genode components, the main logic is in the *C++* codebase. However, PhantomOS's kernel code is in the *C* codebase. Hence, an API was created to call the *C++* methods from the *C* code (/see src/include/squidlib.h/).

** TODO [#B] Squid Versioning
:properties:
:effort: 1
:end:
To ensure compatibility with breaking-changes, a versioning system should be introduced. The version data will be kept inside the *global_squid* object and it will be written out in the snapshot metadata in a human-readable format.

** DONE Virtual Memory Capture and Restore
The Squid Snapshot mechanism is being integrated into the virtual memory. The changes need to be made in the files *src/phantom/isomem/vm_map.h* and *src/phantom/isomem/vm_map.c*.

The snapshot marks pages for a _pageout_, which is handled by =vm_page_req_pageout()= in *src/phantom/isomem/vm_map.c*.

** TODO [#A] Migration of the Snapshotting Mechanism as a Standalone Genode Plugin
:properties:
:effort: 40
:end:
Separate (and then integrate back into PhantomOS) the squid snapshotting mechanism. The primary advantages of this, is that the implementation can better leverage Genode's API and the plugin can be used in other projects.

** TODO [#C] Hardlink Non-Dirty Pages [%]
:properties:
:effort:   10
:end:
Pages that have not been modified since the last update should already have a hash. Instead of creating a new file for them, the file from the old snapshot should be hardlinked.

- [ ] Will have to modify the _SquidFileHash_ API to allow requesting specific hashes.

** TODO [#C] Snapshot Metadata
:properties:
:effort: 3
:end:
Human-readable metadata should be introduced for debugging and bookkeeping purposes. This metadata will be stored in a text file at the root of every snapshot directory. The metadata should include:
- Squid Version
  The version of the implementation.
- Snapshot Size
  The disk-space occupied by the snapshot.

** TODO [#B] Incomplete Snapshots
:properties:
:effort: 2
:end:
In the event that the system crashed during a snapshot, the kernel should roll back to the previous version and remove the artifacts of the current incomplete snapshot.

A complete snapshot is signified by a _timestamp_ for a name. An incomplete snapshot would still be called *current_snapshot*.

** TODO [#C] Available Disk-Space [0%]
:properties:
:effort: 15
:end:
To ensure there is enough disk-space on for a snapshot we should keep track of the available disk space on the system.
- [ ] Estimation of snapshot size
- [ ] Measurement of available space
 To measure the available disk space with lwext4's ext4.h:
 #+begin_src C
   struct ext4_mount_stats stats;
   
   int err = ext4_mount_point_stats("/squid-root", &stats);
   if (err != 0) {} // error occured

   uint32_t avail_disk_space = stats.free_blocks_count * stats.block_size;
 #+end_src
- [ ] Deletion of old snapshots

** TODO [#C] User-defined Snapshot Parameters
:properties:
:effort: 15
:end:
User should be able to specify values for the snapshot (e.g. *ROOT_SIZE*, *L1_SIZE* and *L2_SIZE*). Currently, the most reasonable way to do this is through Genode's XML API, however the Genode community has expressed interest in moving away from XML.

** TODO [#C] Clustering
Cluster multiple files together to save space on metadata?

** TODO [#B] Formal Proof
:properties:
:effort: 10
:end:
Prove that system is bullet proof and that it handles all contingencies.

** TODO [#C] Encrypted Snapshots
:properties:
:effort: 80
:end:
For security reasons, it would be great if the snapshots can be encrypted when saved to disk.

** TODO [#C] Power-Consumption Concerns
:properties:
:effort: 40
:end:
Since one of PhantomOS's main targets is wearable devices, the operating system should be power efficient.
- [ ] Look into CPU affinity: can we force the snapshot to take place on a power-efficient core?
 
* Conclusion

In conclusion, by transitioning from a superblock structure to a logging-based approach, the new mechanism optimizes memory usage and enhances performance by only saving changes rather than the entire state. The integration of the Ext4 filesystem through the lwext4 Genode community library has proven effective, addressing challenges such as improper unmounting and ensuring efficient data reads and writes.

Overall, the Squid Snapshot mechanism offers a promising path forward for PhantomOS, enhancing its capability to preserve system state across unexpected crashes and providing a more reliable and efficient operating environment.

* Footnotes

[fn:2] Kirill Samburskiy - "Introducing bytecode runtime into a persistent operating system"
[fn:1] PhantomOS Book - https://phantomdox.readthedocs.io/en/latest/
